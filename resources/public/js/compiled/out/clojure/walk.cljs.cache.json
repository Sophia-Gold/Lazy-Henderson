["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",null,"~:name","~$clojure.walk","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","~$walk",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/clojure/walk.cljs","~:line",37,"~:column",7,"~:end-line",37,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^C",[["~$inner","~$outer","~$form"]]]]],"~:doc","Traverses form, an arbitrary data structure.  inner and outer are\n  functions.  Applies inner to each element of form, building up a\n  data structure of the same type, then applies outer to the result.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.","~:added","1.1"],"^I","1.1","^4","~$clojure.walk/walk","~:variadic",false,"^=","resources/public/js/compiled/out/clojure/walk.cljs","^A",11,"~:method-params",["^C",[["^E","^F","^G"]]],"~:protocol-impl",null,"~:arglists-meta",["^C",[null,null]],"^?",1,"^>",37,"^@",37,"~:max-fixed-arity",3,"~:fn-var",true,"^B",["^C",["^D",["^C",[["^E","^F","^G"]]]]],"^H","Traverses form, an arbitrary data structure.  inner and outer are\n  functions.  Applies inner to each element of form, building up a\n  data structure of the same type, then applies outer to the result.\n  Recognizes all Clojure data structures. Consumes seqs as with doall."],"~$postwalk",["^ ","^;",null,"^<",["^ ","^=","/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/clojure/walk.cljs","^>",52,"^?",7,"^@",52,"^A",15,"^B",["^C",["^D",["^C",[["~$f","^G"]]]]],"^H","Performs a depth-first, post-order traversal of form.  Calls f on\n  each sub-form, uses f's return value in place of the original.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.","^I","1.1"],"^I","1.1","^4","~$clojure.walk/postwalk","^K",false,"^=","resources/public/js/compiled/out/clojure/walk.cljs","^A",15,"^L",["^C",[["~$f","^G"]]],"^M",null,"^N",["^C",[null,null]],"^?",1,"^>",52,"^@",52,"^O",2,"^P",true,"^B",["^C",["^D",["^C",[["~$f","^G"]]]]],"^H","Performs a depth-first, post-order traversal of form.  Calls f on\n  each sub-form, uses f's return value in place of the original.\n  Recognizes all Clojure data structures. Consumes seqs as with doall."],"~$prewalk",["^ ","^;",null,"^<",["^ ","^=","/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/clojure/walk.cljs","^>",60,"^?",7,"^@",60,"^A",14,"^B",["^C",["^D",["^C",[["~$f","^G"]]]]],"^H","Like postwalk, but does pre-order traversal.","^I","1.1"],"^I","1.1","^4","~$clojure.walk/prewalk","^K",false,"^=","resources/public/js/compiled/out/clojure/walk.cljs","^A",14,"^L",["^C",[["~$f","^G"]]],"^M",null,"^N",["^C",[null,null]],"^?",1,"^>",60,"^@",60,"^O",2,"^P",true,"^B",["^C",["^D",["^C",[["~$f","^G"]]]]],"^H","Like postwalk, but does pre-order traversal."],"~$keywordize-keys",["^ ","^;",null,"^<",["^ ","^=","/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/clojure/walk.cljs","^>",66,"^?",7,"^@",66,"^A",22,"^B",["^C",["^D",["^C",[["~$m"]]]]],"^H","Recursively transforms all map keys from strings to keywords.","^I","1.1"],"^I","1.1","^4","~$clojure.walk/keywordize-keys","^K",false,"^=","resources/public/js/compiled/out/clojure/walk.cljs","^A",22,"^L",["^C",[["~$m"]]],"^M",null,"^N",["^C",[null,null]],"^?",1,"^>",66,"^@",66,"^O",1,"^P",true,"^B",["^C",["^D",["^C",[["~$m"]]]]],"^H","Recursively transforms all map keys from strings to keywords."],"~$stringify-keys",["^ ","^;",null,"^<",["^ ","^=","/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/clojure/walk.cljs","^>",74,"^?",7,"^@",74,"^A",21,"^B",["^C",["^D",["^C",[["~$m"]]]]],"^H","Recursively transforms all map keys from keywords to strings.","^I","1.1"],"^I","1.1","^4","~$clojure.walk/stringify-keys","^K",false,"^=","resources/public/js/compiled/out/clojure/walk.cljs","^A",21,"^L",["^C",[["~$m"]]],"^M",null,"^N",["^C",[null,null]],"^?",1,"^>",74,"^@",74,"^O",1,"^P",true,"^B",["^C",["^D",["^C",[["~$m"]]]]],"^H","Recursively transforms all map keys from keywords to strings."],"~$prewalk-replace",["^ ","^;",null,"^<",["^ ","^=","/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/clojure/walk.cljs","^>",82,"^?",7,"^@",82,"^A",22,"^B",["^C",["^D",["^C",[["~$smap","^G"]]]]],"^H","Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the root of the tree first.","^I","1.1"],"^I","1.1","^4","~$clojure.walk/prewalk-replace","^K",false,"^=","resources/public/js/compiled/out/clojure/walk.cljs","^A",22,"^L",["^C",[["^Z","^G"]]],"^M",null,"^N",["^C",[null,null]],"^?",1,"^>",82,"^@",82,"^O",2,"^P",true,"^B",["^C",["^D",["^C",[["^Z","^G"]]]]],"^H","Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the root of the tree first."],"~$postwalk-replace",["^ ","^;",null,"^<",["^ ","^=","/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/clojure/walk.cljs","^>",90,"^?",7,"^@",90,"^A",23,"^B",["^C",["^D",["^C",[["^Z","^G"]]]]],"^H","Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the leaves of the tree first.","^I","1.1"],"^I","1.1","^4","~$clojure.walk/postwalk-replace","^K",false,"^=","resources/public/js/compiled/out/clojure/walk.cljs","^A",23,"^L",["^C",[["^Z","^G"]]],"^M",null,"^N",["^C",[null,null]],"^?",1,"^>",90,"^@",90,"^O",2,"^P",true,"^B",["^C",["^D",["^C",[["^Z","^G"]]]]],"^H","Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the leaves of the tree first."]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["~#set",["~:else"]],"~:order",["^16"]],"^H","This file defines a generic tree walker for Clojure data\nstructures.  It takes any data structure (list, vector, map, set,\nseq), calls a function on every element, and uses the return value\nof the function in place of the original.  This makes it fairly\neasy to write recursive search-and-replace functions, as shown in\nthe examples.\n\nNote: \"walk\" supports all Clojure data structures EXCEPT maps\ncreated with sorted-map-by.  There is no (obvious) way to retrieve\nthe sorting function."]