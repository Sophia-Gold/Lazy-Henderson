{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{cat * or merge keys + and def}, :name cljs.spec, :imports nil, :requires {cljs.core cljs.core, gobj goog.object, goog.object goog.object, walk clojure.walk, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen, c cljs.core, str clojure.string, clojure.string clojure.string, clojure.walk clojure.walk}, :uses nil, :defs {form {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 128, :column 7, :end-line 128, :end-column 11, :arglists (quote ([spec])), :doc "returns the spec as data"}, :name cljs.spec/form, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns the spec as data"}, t_cljs$spec34138 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34138, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 4, :line 482, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, *recursion-limit* {:name cljs.spec/*recursion-limit*, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 21, :column 1, :end-line 21, :end-column 33, :dynamic true, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 21, :column 16, :end-line 21, :end-column 33, :dynamic true}, :doc "A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."}, *coll-error-limit* {:name cljs.spec/*coll-error-limit*, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 35, :column 1, :end-line 35, :end-column 34, :dynamic true, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 35, :column 16, :end-line 35, :end-column 34, :dynamic true}, :doc "The number of errors reported by explain in a collection spec'ed with 'every'"}, op-explain {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 962, :column 8, :end-line 962, :end-column 18, :private true, :arglists (quote ([form p path via in input]))}, :private true, :name cljs.spec/op-explain, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([form p path via in input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 962, :end-line 962, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form p path via in input]))}, t_cljs$spec34550 {:num-fields 10, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/t_cljs$spec34550, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 1142, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, alt-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 846, :column 19, :end-line 846, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, :name cljs.spec/alt-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 846, :end-line 846, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, tagged-ret {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 533, :column 8, :end-line 533, :end-column 18, :private true, :arglists (quote ([v]))}, :private true, :name cljs.spec/tagged-ret, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 533, :end-line 533, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, ->t_cljs$spec34105 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form pred gfn cpred? unc meta34106])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34105, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([form pred gfn cpred? unc meta34106]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 414, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred gfn cpred? unc meta34106])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, def-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 248, :column 19, :end-line 248, :end-column 27, :skip-wiki true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, :name cljs.spec/def-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([k form spec]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, t_cljs$spec34556 {:num-fields 10, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/t_cljs$spec34556, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 1142, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, regex-spec-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 1094, :column 19, :end-line 1094, :end-column 34, :skip-wiki true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, :name cljs.spec/regex-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 34, :method-params ([re gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1094, :end-line 1094, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, merge-spec-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 633, :column 19, :end-line 633, :end-column 34, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, :name cljs.spec/merge-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 34, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 633, :end-line 633, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, explain-data* {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 166, :column 7, :end-line 166, :end-column 20, :arglists (quote ([spec path via in x]))}, :name cljs.spec/explain-data*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x]))}, add-ret {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 913, :column 8, :end-line 913, :end-column 15, :private true, :arglists (quote ([p r k]))}, :private true, :name cljs.spec/add-ret, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([p r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 913, :end-line 913, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p r k]))}, explain-pred-list {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 590, :column 8, :end-line 590, :end-column 25, :private true, :arglists (quote ([forms preds path via in x]))}, :private true, :name cljs.spec/explain-pred-list, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 25, :method-params ([forms preds path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 590, :end-line 590, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds path via in x]))}, MAX_INT {:name cljs.spec/MAX_INT, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 19, :column 1, :end-line 19, :end-column 21, :const true, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 19, :column 14, :end-line 19, :end-column 21, :const true}}, alt2 {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 844, :column 8, :end-line 844, :end-column 12, :private true, :arglists (quote ([p1 p2]))}, :private true, :name cljs.spec/alt2, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 844, :end-line 844, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, inst-in-range? {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 1189, :column 7, :end-line 1189, :end-column 21, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, :name cljs.spec/inst-in-range?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 21, :method-params ([start end inst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1189, :end-line 1189, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, registry-ref {:name cljs.spec/registry-ref, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 47, :column 1, :end-line 47, :end-column 32, :private true, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 47, :column 20, :end-line 47, :end-column 32, :private true}}, accept? {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 781, :column 8, :end-line 781, :end-column 15, :private true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, :private true, :name cljs.spec/accept?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([p__34311]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 781, :end-line 781, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, and-spec-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 601, :column 19, :end-line 601, :end-column 32, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, :name cljs.spec/and-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 32, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 601, :end-line 601, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, accept {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 779, :column 8, :end-line 779, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/accept, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 779, :end-line 779, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, t_cljs$spec34064 {:num-fields 20, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34064, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 333, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, recur-limit? {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 291, :column 8, :end-line 291, :end-column 20, :private true, :arglists (quote ([rmap id path k]))}, :private true, :name cljs.spec/recur-limit?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([rmap id path k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rmap id path k]))}, t_cljs$spec34268 {:num-fields 5, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34268, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 636, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, describe* {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 45, :column 4, :end-line 45, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec]))}, :protocol cljs.spec/Spec, :name cljs.spec/describe*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc nil}, map-spec-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 325, :column 19, :end-line 325, :end-column 32, :skip-wiki true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, :name cljs.spec/map-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 32, :method-params ([p__34031]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, reg-resolve! {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 73, :column 8, :end-line 73, :end-column 20, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, :private true, :name cljs.spec/reg-resolve!, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, re-explain {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 1068, :column 8, :end-line 1068, :end-column 18, :private true, :arglists (quote ([path via in re input]))}, :private true, :name cljs.spec/re-explain, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([path via in re input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1068, :end-line 1068, :max-fixed-arity 5, :fn-var true, :arglists (quote ([path via in re input]))}, alts {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 843, :column 8, :end-line 843, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/alts, :variadic true, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 843, :end-line 843, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, ->t_cljs$spec34287 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form max-count check? vec__34284 p__34281 gfn gen-max pred kindform conform-keys kind-form addcv cfns map__34282 distinct kindfn kfn gen-into count min-count opts kind conform-all conform-into meta34288])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34287, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([form max-count check? vec__34284 p__34281 gfn gen-max pred kindform conform-keys kind-form addcv cfns map__34282 distinct kindfn kfn gen-into count min-count opts kind conform-all conform-into meta34288]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 698, :max-fixed-arity 25, :fn-var true, :arglists (quote ([form max-count check? vec__34284 p__34281 gfn gen-max pred kindform conform-keys kind-form addcv cfns map__34282 distinct kindfn kfn gen-into count min-count opts kind conform-all conform-into meta34288])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, with-name {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 51, :column 8, :end-line 51, :end-column 17, :private true, :arglists (quote ([spec name]))}, :private true, :name cljs.spec/with-name, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([spec name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec name]))}, explain {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 212, :column 7, :end-line 212, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, :name cljs.spec/explain, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, spec-name {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 54, :column 8, :end-line 54, :end-column 17, :private true, :arglists (quote ([spec]))}, :private true, :name cljs.spec/spec-name, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, map-spec {:name cljs.spec/map-spec, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 275, :column 1, :end-line 275, :end-column 18, :declared true, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 275, :column 10, :end-line 275, :end-column 18, :declared true}}, t_cljs$spec34120 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34120, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 444, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, with-gen* {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 44, :column 4, :end-line 44, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec gfn]))}, :protocol cljs.spec/Spec, :name cljs.spec/with-gen*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([spec gfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gfn])), :doc nil}, ->t_cljs$spec34271 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([merge-spec-impl forms preds gfn meta34272])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34271, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([merge-spec-impl forms preds gfn meta34272]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 636, :max-fixed-arity 5, :fn-var true, :arglists (quote ([merge-spec-impl forms preds gfn meta34272])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, or-spec-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 539, :column 19, :end-line 539, :end-column 31, :skip-wiki true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, :name cljs.spec/or-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 31, :method-params ([keys forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 539, :end-line 539, :max-fixed-arity 4, :fn-var true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, specize {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 112, :column 8, :end-line 112, :end-column 15, :private true, :arglists (quote ([s]))}, :private true, :name cljs.spec/specize, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, *fspec-iterations* {:name cljs.spec/*fspec-iterations*, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 27, :column 1, :end-line 27, :end-column 34, :dynamic true, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 27, :column 16, :end-line 27, :end-column 34, :dynamic true}, :doc "The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"}, Spec {:meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 39, :column 14, :end-line 39, :end-column 18, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}}, :protocol-symbol true, :name cljs.spec/Spec, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :column 1, :line 39, :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}, :info nil, :end-line 39, :impls #{cljs.spec/t_cljs$spec34271 cljs.spec/t_cljs$spec34151 cljs.spec/t_cljs$spec34105 cljs.spec/t_cljs$spec34537 cljs.spec/t_cljs$spec34287 cljs.spec/t_cljs$spec34550 cljs.spec/t_cljs$spec34268 cljs.spec/t_cljs$spec34540 cljs.spec/t_cljs$spec34158 cljs.spec/t_cljs$spec34120 cljs.spec/t_cljs$spec34254 cljs.spec/t_cljs$spec34034 cljs.spec/t_cljs$spec34556 cljs.spec/t_cljs$spec34138 cljs.spec/t_cljs$spec34064 cljs.spec/t_cljs$spec34257}, :doc nil, :jsdoc ("@interface")}, unform {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 121, :column 7, :end-line 121, :end-column 13, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, :name cljs.spec/unform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, valid? {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 311, :column 7, :end-line 311, :end-column 13, :arglists (quote ([spec x] [spec x form])), :doc "Helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}}, :name cljs.spec/valid?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}, :method-params ([spec x] [spec x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 3, :fn-var true, :arglists ([spec x] [spec x form]), :doc "Helper function that returns true when x is valid for spec."}, ->t_cljs$spec34254 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([and-spec-impl forms preds gfn meta34255])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34254, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([and-spec-impl forms preds gfn meta34255]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 604, :max-fixed-arity 5, :fn-var true, :arglists (quote ([and-spec-impl forms preds gfn meta34255])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec34254 {:num-fields 5, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34254, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 604, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec34556 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta34557])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec34556, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta34557]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1142, :max-fixed-arity 10, :fn-var true, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta34557])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, gen {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 235, :column 7, :end-line 235, :end-column 10, :arglists (quote ([spec] [spec overrides])), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}}, :name cljs.spec/gen, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}, :method-params ([spec] [spec overrides]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 2, :fn-var true, :arglists ([spec] [spec overrides]), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"}, ->t_cljs$spec34537 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([regex-spec-impl re gfn meta34538])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34537, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([regex-spec-impl re gfn meta34538]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1097, :max-fixed-arity 4, :fn-var true, :arglists (quote ([regex-spec-impl re gfn meta34538])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec34257 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([and-spec-impl forms preds gfn meta34258])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34257, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([and-spec-impl forms preds gfn meta34258]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 604, :max-fixed-arity 5, :fn-var true, :arglists (quote ([and-spec-impl forms preds gfn meta34258])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unform* {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 41, :column 4, :end-line 41, :end-column 11, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec y]))}, :protocol cljs.spec/Spec, :name cljs.spec/unform*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 11, :method-params ([spec y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec y])), :doc nil}, ->sym {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 263, :column 8, :end-line 263, :end-column 13, :private true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, :private true, :name cljs.spec/->sym, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, abbrev {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 134, :column 7, :end-line 134, :end-column 13, :arglists (quote ([form]))}, :name cljs.spec/abbrev, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, regex? {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 86, :column 7, :end-line 86, :end-column 13, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, :name cljs.spec/regex?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, int-in-range? {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 1196, :column 7, :end-line 1196, :end-column 20, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, :name cljs.spec/int-in-range?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([start end val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1196, :end-line 1196, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, t_cljs$spec34257 {:num-fields 5, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34257, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 604, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec34537 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34537, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 1097, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, dt {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 298, :column 8, :end-line 298, :end-column 10, :private true, :arglists (quote ([pred x form] [pred x form cpred?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec/dt, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}, :method-params ([pred x form] [pred x form cpred?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 298, :end-line 298, :max-fixed-arity 4, :fn-var true, :arglists ([pred x form] [pred x form cpred?])}, t_cljs$spec34287 {:num-fields 25, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34287, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 698, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec34064 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([p__34031 opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs map__34062 req id req-keys opt-specs k->s pred-forms meta34065])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34064, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([p__34031 opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs map__34062 req id req-keys opt-specs k->s pred-forms meta34065]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 333, :max-fixed-arity 20, :fn-var true, :arglists (quote ([p__34031 opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs map__34062 req id req-keys opt-specs k->s pred-forms meta34065])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, preturn {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 877, :column 8, :end-line 877, :end-column 15, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/preturn, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 877, :end-line 877, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, re-conform {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 1055, :column 8, :end-line 1055, :end-column 18, :private true, :arglists (quote ([p [x & xs :as data]]))}, :private true, :name cljs.spec/re-conform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([p p__34505]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1055, :end-line 1055, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [x & xs :as data]]))}, spec? {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 81, :column 7, :end-line 81, :end-column 12, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, :name cljs.spec/spec?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, named? {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 49, :column 8, :end-line 49, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/named?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, registry {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 258, :column 7, :end-line 258, :end-column 15, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, :name cljs.spec/registry, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, ->t_cljs$spec34540 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([regex-spec-impl re gfn meta34541])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34540, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([regex-spec-impl re gfn meta34541]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1097, :max-fixed-arity 4, :fn-var true, :arglists (quote ([regex-spec-impl re gfn meta34541])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, rep+impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 812, :column 19, :end-line 812, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, :name cljs.spec/rep+impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 812, :end-line 812, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, deriv {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 926, :column 8, :end-line 926, :end-column 13, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec/deriv, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 926, :end-line 926, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, exercise {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 1180, :column 7, :end-line 1180, :end-column 15, :arglists (quote ([spec] [spec n] [spec n overrides])), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}}, :name cljs.spec/exercise, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}, :method-params ([spec] [spec n] [spec n overrides]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1180, :end-line 1180, :max-fixed-arity 3, :fn-var true, :arglists ([spec] [spec n] [spec n overrides]), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"}, explain-data {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 171, :column 7, :end-line 171, :end-column 19, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, :name cljs.spec/explain-data, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, tuple-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 478, :column 19, :end-line 478, :end-column 29, :skip-wiki true, :arglists (quote ([forms preds] [forms preds gfn])), :doc "Do not call this directly, use 'tuple'", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/tuple-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}, :method-params ([forms preds] [forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 478, :end-line 478, :max-fixed-arity 3, :fn-var true, :arglists ([forms preds] [forms preds gfn]), :doc "Do not call this directly, use 'tuple'"}, multi-spec-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 431, :column 19, :end-line 431, :end-column 34, :skip-wiki true, :arglists (quote ([form mmvar retag] [form mmvar retag gfn])), :doc "Do not call this directly, use 'multi-spec'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/multi-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}, :method-params ([form mmvar retag] [form mmvar retag gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 431, :end-line 431, :max-fixed-arity 4, :fn-var true, :arglists ([form mmvar retag] [form mmvar retag gfn]), :doc "Do not call this directly, use 'multi-spec'"}, conform {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 115, :column 7, :end-line 115, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, :name cljs.spec/conform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, t_cljs$spec34540 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34540, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 1097, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, gen* {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 43, :column 4, :end-line 43, :end-column 8, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec overrides path rmap]))}, :protocol cljs.spec/Spec, :name cljs.spec/gen*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 8, :method-params ([spec overrides path rmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 43, :max-fixed-arity 4, :fn-var true, :arglists (quote ([spec overrides path rmap])), :doc nil}, ->t_cljs$spec34138 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta34139])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34138, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([forms preds gfn meta34139]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 4, :factory :positional, :line 482, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta34139])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, fspec-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 1138, :column 19, :end-line 1138, :end-column 29, :skip-wiki true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, :name cljs.spec/fspec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 29, :method-params ([argspec aform retspec rform fnspec fform gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1138, :end-line 1138, :max-fixed-arity 7, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, inck {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 295, :column 8, :end-line 295, :end-column 12, :private true, :arglists (quote ([m k]))}, :private true, :name cljs.spec/inck, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, *coll-check-limit* {:name cljs.spec/*coll-check-limit*, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 31, :column 1, :end-line 31, :end-column 34, :dynamic true, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 31, :column 16, :end-line 31, :end-column 34, :dynamic true}, :doc "The number of items validated in a collection spec'ed with 'every'"}, get-spec {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 270, :column 7, :end-line 270, :end-column 15, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, :name cljs.spec/get-spec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, gensub {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 224, :column 8, :end-line 224, :end-column 14, :private true, :arglists (quote ([spec overrides path rmap form]))}, :private true, :name cljs.spec/gensub, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([spec overrides path rmap form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec overrides path rmap form]))}, the-spec {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 105, :column 8, :end-line 105, :end-column 16, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, :private true, :name cljs.spec/the-spec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 16, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, coll-prob {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 613, :column 8, :end-line 613, :end-column 17, :private true, :arglists (quote ([x kfn kform distinct count min-count max-count path via in]))}, :private true, :name cljs.spec/coll-prob, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([x kfn kform distinct count min-count max-count path via in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 613, :end-line 613, :max-fixed-arity 10, :fn-var true, :arglists (quote ([x kfn kform distinct count min-count max-count path via in]))}, every-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 657, :column 19, :end-line 657, :end-column 29, :skip-wiki true, :arglists (quote ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn])), :doc "Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/every-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists-meta (nil nil)}, :method-params ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 657, :end-line 657, :max-fixed-arity 4, :fn-var true, :arglists ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :doc "Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"}, accept-nil? {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 862, :column 8, :end-line 862, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/accept-nil?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 862, :end-line 862, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, maybe-spec {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 94, :column 8, :end-line 94, :end-column 18, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, :private true, :name cljs.spec/maybe-spec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, ->t_cljs$spec34158 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta34159])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34158, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([or-spec-impl keys forms preds gfn id kps cform meta34159]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 553, :max-fixed-arity 9, :fn-var true, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta34159])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, spec-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 405, :column 19, :end-line 405, :end-column 28, :skip-wiki true, :arglists (quote ([form pred gfn cpred?] [form pred gfn cpred? unc])), :doc "Do not call this directly, use 'spec'", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}}, :name cljs.spec/spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 405, :end-line 405, :max-fixed-arity 5, :fn-var true, :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :doc "Do not call this directly, use 'spec'"}, t_cljs$spec34105 {:num-fields 6, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34105, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 414, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec34271 {:num-fields 5, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34271, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 636, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, amp-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 817, :column 19, :end-line 817, :end-column 27, :skip-wiki true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, :name cljs.spec/amp-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([re preds pred-forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 817, :end-line 817, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, pcat* {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 784, :column 8, :end-line 784, :end-column 13, :private true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, :private true, :name cljs.spec/pcat*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([p__34316]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 784, :end-line 784, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, ->t_cljs$spec34550 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta34551])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec34550, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta34551]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1142, :max-fixed-arity 10, :fn-var true, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta34551])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, alt* {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 831, :column 8, :end-line 831, :end-column 12, :private true, :arglists (quote ([ps ks forms]))}, :private true, :name cljs.spec/alt*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([ps ks forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 831, :end-line 831, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ps ks forms]))}, cat-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 796, :column 19, :end-line 796, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, :name cljs.spec/cat-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 796, :end-line 796, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, macroexpand-check {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 277, :column 8, :end-line 277, :end-column 25, :private true, :arglists (quote ([v args]))}, :private true, :name cljs.spec/macroexpand-check, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 25, :method-params ([v args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v args]))}, reg-resolve {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 61, :column 8, :end-line 61, :end-column 19, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not Named"}, :private true, :name cljs.spec/reg-resolve, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not Named"}, t_cljs$spec34158 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34158, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 553, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain-str {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 217, :column 7, :end-line 217, :end-column 18, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, :name cljs.spec/explain-str, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, with-gen {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 158, :column 7, :end-line 158, :end-column 15, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, :name cljs.spec/with-gen, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([spec gen-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, conform* {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 40, :column 4, :end-line 40, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec x]))}, :protocol cljs.spec/Spec, :name cljs.spec/conform*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc nil}, noret? {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 854, :column 8, :end-line 854, :end-column 14, :private true, :arglists (quote ([p1 pret]))}, :private true, :name cljs.spec/noret?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([p1 pret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 854, :end-line 854, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 pret]))}, rep-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 808, :column 19, :end-line 808, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, :name cljs.spec/rep-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 808, :end-line 808, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, ->t_cljs$spec34120 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form mmvar retag gfn id predx dval tag meta34121])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34120, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([form mmvar retag gfn id predx dval tag meta34121]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 444, :max-fixed-arity 9, :fn-var true, :arglists (quote ([form mmvar retag gfn id predx dval tag meta34121])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, op-describe {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 946, :column 8, :end-line 946, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/op-describe, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 946, :end-line 946, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, ->t_cljs$spec34151 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta34152])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34151, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([or-spec-impl keys forms preds gfn id kps cform meta34152]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 553, :max-fixed-arity 9, :fn-var true, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta34152])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, describe {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 153, :column 7, :end-line 153, :end-column 15, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, :name cljs.spec/describe, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, explain-1 {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 318, :column 8, :end-line 318, :end-column 17, :private true, :arglists (quote ([form pred path via in v]))}, :private true, :name cljs.spec/explain-1, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([form pred path via in v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred path via in v]))}, explain-out {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 180, :column 7, :end-line 180, :end-column 18, :arglists (quote ([ed])), :doc "prints an explanation to *out*."}, :name cljs.spec/explain-out, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "prints an explanation to *out*."}, re-gen {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 1017, :column 8, :end-line 1017, :end-column 14, :private true, :arglists (quote ([p overrides path rmap f]))}, :private true, :name cljs.spec/re-gen, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([p overrides path rmap f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1017, :end-line 1017, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p overrides path rmap f]))}, filter-alt {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 822, :column 8, :end-line 822, :end-column 18, :private true, :arglists (quote ([ps ks forms f]))}, :private true, :name cljs.spec/filter-alt, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([ps ks forms f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 822, :end-line 822, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ps ks forms f]))}, and-preds {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 578, :column 8, :end-line 578, :end-column 17, :private true, :arglists (quote ([x preds forms]))}, :private true, :name cljs.spec/and-preds, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([x preds forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 578, :end-line 578, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x preds forms]))}, ->t_cljs$spec34268 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([merge-spec-impl forms preds gfn meta34269])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34268, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([merge-spec-impl forms preds gfn meta34269]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 636, :max-fixed-arity 5, :fn-var true, :arglists (quote ([merge-spec-impl forms preds gfn meta34269])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec34034 {:num-fields 20, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34034, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 333, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, call-valid? {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 1117, :column 8, :end-line 1117, :end-column 19, :private true, :arglists (quote ([f specs args]))}, :private true, :name cljs.spec/call-valid?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([f specs args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1117, :end-line 1117, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs args]))}, op-unform {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 892, :column 8, :end-line 892, :end-column 17, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec/op-unform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 892, :end-line 892, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, t_cljs$spec34151 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec34151, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 553, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, rep* {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 801, :column 8, :end-line 801, :end-column 12, :private true, :arglists (quote ([p1 p2 ret splice form]))}, :private true, :name cljs.spec/rep*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2 ret splice form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 801, :end-line 801, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p1 p2 ret splice form]))}, maybe-impl {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 850, :column 19, :end-line 850, :end-column 29, :skip-wiki true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, :name cljs.spec/maybe-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 29, :method-params ([p form]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 850, :end-line 850, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, ->t_cljs$spec34034 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([p__34031 opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys map__34032 req-specs keys->specs req id req-keys opt-specs k->s pred-forms meta34035])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec34034, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([p__34031 opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys map__34032 req-specs keys->specs req id req-keys opt-specs k->s pred-forms meta34035]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 333, :max-fixed-arity 20, :fn-var true, :arglists (quote ([p__34031 opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys map__34032 req-specs keys->specs req id req-keys opt-specs k->s pred-forms meta34035])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, pcat {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 794, :column 8, :end-line 794, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/pcat, :variadic true, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 794, :end-line 794, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, explain* {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 42, :column 4, :end-line 42, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec path via in x]))}, :protocol cljs.spec/Spec, :name cljs.spec/explain*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 42, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x])), :doc nil}, validate-fn {:protocol-inline nil, :meta {:file "/home/sophia/Desktop/Clojure/Lazy-Henderson/resources/public/js/compiled/out/cljs/spec.cljs", :line 1128, :column 8, :end-line 1128, :end-column 19, :private true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}, :private true, :name cljs.spec/validate-fn, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([f specs iters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1128, :end-line 1128, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}}, :require-macros {c cljs.core, cljs.core cljs.core, s cljs.spec, cljs.spec cljs.spec, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen}, :cljs.analyzer/constants {:seen #{form tag max-count :args :max-tries :path :req-un :opt-un cljs.spec/keys p__34031 meta34035 unc :cljs.spec/invalid meta34288 cljs.spec/merge :p2 :ret p1__34568# :gfn :pred-exprs :into vector? :gen-max map :shrunk :fn regex-spec-impl merge-spec-impl cljs.core/vector? meta34541 predx :rep+ :cljs.spec/amp cljs.core/= :opt-keys aform meta34258 meta34538 :pred dval meta34065 :splice and-spec-impl check? forms opt argspec vec__34284 :else :cljs.spec/k map-spec-impl :ks p__34281 cljs.core/count req-un opt-un :cljs.spec/args :_ :maybe meta34139 :via :cljs.spec/kfn :as zipmap :req-specs gfn gen-max fnspec cljs.spec/multi-spec v map? pred-exprs :conform-keys keys-pred meta34269 cpred? or-spec-impl argm fn :val fform opt-keys pred meta34272 :cljs.spec/alt map__34032 cljs.core/map? :cljs.spec/conform-all :skip-wiki :p1 cljs.core/zipmap :cljs.spec/nil % :cljs.spec/pcat cljs.core/map cljs.spec/conformer method :distinct cljs.spec/? req-specs cljs.spec/* kindform re conform-keys meta34121 kps :reason preds kind-form cljs.spec/+ :req addcv meta34255 :cljs.spec/name :cljs.spec/unknown :keys :cljs.spec/recursion-limit cfns fn* cljs.core/<= meta34551 cljs.spec/alt map__34282 :id fspec-impl :min-count :kind :cljs.spec/rep :smallest cljs.core/set? :count keys->specs mmvar :req-keys retag k cljs.core/fn cljs.core/list? distinct map__34062 retspec :cljs.spec/accept :opt-specs cljs.spec/and :cljs.spec/kind-form cljs.spec/cat rform meta34152 ifn? kindfn :pred-forms req js/Number.MAX_SAFE_INTEGER cljs.spec/every :cljs.spec/gfn keys distinct? p1__34567# :max-count cljs.spec/or kfn :max-elements gen-into cljs.core/seqable? quote :arglists cljs.core/coll? id meta34159 :num-elements cljs.spec/fspec :doc specs cljs.spec/tuple count req-keys apply :cljs.spec/op min-count opts kind :cljs.spec/v cform meta34106 :min-elements clojure.spec/& opt-specs conform-all meta34557 :cljs.spec/problems :forms :ps k->s :cljs.spec/kvs->map :in conform-into :accept :opt pred-forms}, :order [:cljs.spec/name :cljs.spec/op :cljs.spec/unknown fn % :else :cljs.spec/gfn :cljs.spec/problems :path :pred :val :reason :via :in :cljs.spec/recursion-limit :args :cljs.spec/invalid :cljs.spec/args :opt :req-un :opt-un :gfn :pred-exprs :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms map? cljs.spec/keys p__34031 opt map-spec-impl :skip-wiki :arglists :doc quote :keys :as req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms gfn argm keys-pred map__34032 keys->specs id k->s meta34035 map__34062 meta34065 form pred cpred? unc meta34106 method cljs.spec/multi-spec mmvar retag predx dval tag meta34121 vector? cljs.core/= cljs.core/count cljs.spec/tuple forms preds meta34139 cljs.spec/or or-spec-impl keys kps cform meta34152 meta34159 cljs.spec/and and-spec-impl meta34255 meta34258 cljs.core/coll? distinct? cljs.core/<= js/Number.MAX_SAFE_INTEGER cljs.spec/merge merge-spec-impl meta34269 meta34272 :max-count :cljs.spec/kfn :gen-max :cljs.spec/conform-all :conform-keys :distinct :cljs.spec/kind-form :into :count :min-count :kind cljs.core/map? cljs.core/vector? cljs.core/list? cljs.core/set? cljs.core/seqable? :num-elements :max-tries :min-elements :max-elements cljs.spec/every max-count check? vec__34284 p__34281 gen-max kindform conform-keys kind-form addcv cfns map__34282 distinct kindfn kfn gen-into count min-count opts kind conform-all conform-into meta34288 :ret :cljs.spec/accept :ps :ks :forms :rep+ :cljs.spec/pcat :p2 :splice :id :cljs.spec/rep :p1 cljs.spec/* :cljs.spec/amp :cljs.spec/alt :cljs.spec/nil :maybe clojure.spec/& cljs.spec/+ cljs.spec/cat :_ cljs.spec/? cljs.spec/alt :accept regex-spec-impl re meta34538 meta34541 :fn :smallest :shrunk apply ifn? cljs.spec/fspec fspec-impl argspec aform retspec rform fnspec fform specs meta34551 meta34557 :cljs.spec/kvs->map cljs.spec/conformer fn* p1__34567# cljs.core/zipmap cljs.core/map :cljs.spec/k :cljs.spec/v p1__34568# cljs.core/fn k v zipmap map]}, :doc nil}